{{ range "router/nginx" | ls }}
{{ .Key }} {{ .Value }};{{ end }}

events {
  {{ range "router/nginx/events" | ls }}
  {{ .Key }} {{ .Value }};{{ end }}
}

http {
  {{ range "router/nginx/http" | ls }}
  {{ .Key }} {{ .Value }};{{ end }}

  {{ range $service := services }}
    {{ if not (in ("mesos-consul,consul,builder"|split ",") $service.Name) }}
        {{ range .Tags }}
            upstream {{ $service.Name }}_{{ . }} {
                {{ with $service_tag := printf "%s.%s" . $service.Name }}{{ range service $service_tag }}
                server {{ .Address }}:{{ .Port }};{{ end }} {{ end }}
              }
        {{ else }}
            upstream {{ $service.Name }} {
                {{ range service $service.Name }}
                server {{ .Address }}:{{ .Port }};{{ end }}
            }
        {{ end }}
    {{ end }}
  {{ end }}


  {{ range $service := services }}
    {{ if not (in ("mesos-consul,consul,builder"|split ",") $service.Name) }}
        {{ range .Tags }}
          server {
            listen 80;
            server_name {{ . }}.{{ $service.Name }}.{{key "router/domain"}};
            location / {
              proxy_pass http://{{ $service.Name }}_{{ . }}/;
              proxy_set_header Host            $host;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            }
          }
        {{ else }}
          server {
            listen 80;
            server_name {{ $service.Name }}.{{key "router/domain"}};
            location / {
              proxy_pass http://{{ $service.Name }}/;
              proxy_set_header Host            $host;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            }
          }
        {{ end }}
    {{ end }}
  {{ end }}
  {{ range $key, $pairs := tree "routes"| byKey }}
    {{$domain := $key}}
    {{ range $pathKey, $pathPairs := tree (printf "%s/%s" "routes" $domain) | byKey }}
        {{$route := $pathKey|replaceAll ":" "/"}}
        {{$proxy_pass := printf "%s-%s" ($domain|replaceAll "." "-") ($route|replaceAll "/" "-")}}
        {{/* myplugin gets all working services from consul services api and all app names under the k/v path from consul k/v api, */}}
        {{/* if none of the app names has responding working service, then myplugin returns "false", otherwise return "true" */}}
        {{ if (plugin "app_conf_service_instance_checker" (printf "routes/%s/%s/" $domain $pathKey) (env "CONSUL_HTTP_ADDR")) | eq "true" }}
          upstream {{$proxy_pass}} {
              {{range $pair := $pathPairs }}
                {{$app := .Key}}
                {{ range $service := services }}
                  {{ if $service.Name | eq $app }}
                    {{/* if a service is scaled, then there are multi services with the same name */}}
                    {{ range service $service.Name }}
                    server {{.Address}}:{{.Port}};
                    {{ end }}
                  {{end}}
                {{end}}
              {{end}}
          }
          server {
             listen 80;
             server_name {{$domain}};
             location /{{$route }} {
                expires -1;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_pass http://{{$proxy_pass}}/;
             }
          }
        {{end}}
    {{end}}
  {{end}}

}

stream {
    {{range service "builder"}}
    upstream builder {
        server {{.Address}}:{{.Port}};
    }

    server {
        listen 2222;
        proxy_connect_timeout  "10000";
        proxy_timeout          "1200000";
        proxy_pass builder;
    }
    {{end}}
}
